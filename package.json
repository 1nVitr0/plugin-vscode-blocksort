{
  "name": "blocksort",
  "displayName": "Block Sort",
  "description": "Sort Blocks instead of lines!",
  "author": "1nVitr0",
  "publisher": "1nVitr0",
  "repository": {
    "type": "git",
    "url": "https://github.com/1nVitr0/plugin-vscode-blocksort.git"
  },
  "icon": "resources/icon.png",
  "version": "0.1.2",
  "engines": {
    "vscode": "^1.53.0"
  },
  "categories": [
    "Formatters",
    "Other"
  ],
  "keywords": [
    "sort",
    "format",
    "block",
    "order",
    "block sort"
  ],
  "activationEvents": [
    "onStartupFinished",
    "onCommand:blocksort.sortBlocksAsc",
    "onCommand:blocksort.sortBlocksDesc",
    "onCommand:blocksort.sortBlocksMultilevelAsc",
    "onCommand:blocksort.sortBlocksMultilevelDesc"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "blocksort.sortBlocksAsc",
        "title": "Sort Blocks Ascending",
        "category": "Sort",
        "icon": {
          "dark": "resources/icon_asc_dark.svg",
          "light": "resources/icon_asc.svg"
        }
      },
      {
        "command": "blocksort.sortBlocksDesc",
        "title": "Sort Blocks Descending",
        "category": "Sort",
        "icon": {
          "dark": "resources/icon_desc_dark.svg",
          "light": "resources/icon_desc.svg"
        }
      },
      {
        "command": "blocksort.sortBlocksMultilevelAsc",
        "title": "Sort Blocks Deep Ascending (Multilevel)",
        "category": "Sort",
        "icon": {
          "dark": "resources/icon_asc_dark.svg",
          "light": "resources/icon_asc.svg"
        }
      },
      {
        "command": "blocksort.sortBlocksMultilevelDesc",
        "title": "Sort Blocks Deep Descending (Multilevel)",
        "category": "Sort",
        "icon": {
          "dark": "resources/icon_desc_dark.svg",
          "light": "resources/icon_desc.svg"
        }
      }
    ],
    "configuration": [
      {
        "title": "Block Sort",
        "properties": {
          "blocksort.defaultMultilevelDepth": {
            "description": "Default depth used for depp (multilevel) sorting. Use `-1` for infinite depth",
            "default": -1,
            "type": "integer"
          },
          "blocksort.askForMultilevelDepth": {
            "description": "Controls secondary dialog asking for multilevel Depth. When false, blocksort.defaultMultilevelDepth will be used",
            "default": true,
            "type": "boolean"
          },
          "blocksort.indentIgnoreMarkers": {
            "description": "Lines starting with these will not be taken into account when checking indentation. This is ised for C++-Style blocks ('{' in separate line) and for non-bracketed blocks (begin-end style). '{', 'end.*' and 'esac|fi' are already provided ('end.* is a bit more complicated, feel free to submit issued when some instances do not work)').",
            "default": [],
            "type": "array",
            "items": {
              "type": "string",
              "format": "regex"
            }
          },
          "blocksort.completeBlockMarkers": {
            "description": "Lines ending with these will be handled as completed blocks (e.g. one line JSON objects). '}' and '</.*?>' are already provided (again '</.*?>' is a bit more complicated, feel free to submit issued when some instances do not work)",
            "default": [],
            "type": "array",
            "items": {
              "type": "string",
              "format": "regex"
            }
          },
          "blocksort.foldingMarkers": {
            "description": "Folding markers used to detect folding. Blocks will only be completed if all folding is 0. '()', '[]', '{}' and '<>' are already provided",
            "type": "object",
            "default": {},
            "additionalProperties": {
              "type": "object",
              "properties": {
                "start": {
                  "type": "string",
                  "format": "regex"
                },
                "end": {
                  "type": "string",
                  "format": "regex"
                }
              }
            }
          },
          "blocksort.enableNaturalSorting": {
            "type": "boolean",
            "description": "Sort string containing numbers intuitively (`80` before `443`)",
            "default": false
          },
          "blocksort.naturalSorting": {
            "type": "object",
            "description": "Settings for natural sorting",
            "default": {
              "enabled": false,
              "padding": 9,
              "omitUuids": false,
              "sortNegativeValues": true
            },
            "required": [
              "enabled"
            ],
            "additionalProperties": false,
            "properties": {
              "padding": {
                "description": "For natural sorting numbers are padded with 0. For performance reasons the number of 0s is fixed to this value",
                "default": 9,
                "type": "number",
                "minimum": "0",
                "maximum": "16"
              },
              "omitUuids": {
                "description": "Enables very basic UUID detection and automatically disables natural sorting for these values.  Might still fail for edge cases (like a number at the end of the UUID or on dashes)",
                "default": false,
                "type": "boolean"
              },
              "sortNegativeValues": {
                "description": "Sort negative values before positive. Might fail, especially on UUIDs containing dashes",
                "default": true,
                "type": "boolean"
              }
            }
          },
          "blocksort.sortConsecutiveBlockHeaders": {
            "description": "sort consecutive block headers (such as case or when)",
            "type": "boolean",
            "default": true
          },
          "blocksort.enableCodeLens": {
            "description": "Display `Sort Blocks` code lens under `@blocksort` comments",
            "type": "boolean",
            "default": true
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "test-compile": "tsc -p ./",
    "test-watch": "tsc -watch -p ./",
    "pretest": "npm run test-compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@semantic-release/changelog": "^5.0.1",
    "@semantic-release/git": "^9.0.0",
    "@types/glob": "^7.1.3",
    "@types/mocha": "^8.0.4",
    "@types/node": "^12.11.7",
    "@types/vscode": "^1.53.0",
    "@typescript-eslint/eslint-plugin": "^4.14.1",
    "@typescript-eslint/parser": "^4.14.1",
    "eslint": "^7.19.0",
    "eslint-config-prettier": "^8.1.0",
    "glob": "^7.1.6",
    "mocha": "^8.2.1",
    "semantic-release": "^17.4.2",
    "semantic-release-vsce": "^3.3.0",
    "ts-loader": "^8.0.14",
    "typescript": "^4.1.3",
    "vscode-test": "^1.5.0",
    "webpack": "^5.19.0",
    "webpack-cli": "^4.4.0"
  },
  "release": {
    "branches": [
      "main",
      "develop"
    ],
    "verifyConditions": [
      "semantic-release-vsce",
      "@semantic-release/github"
    ],
    "prepare": {
      "path": "semantic-release-vsce",
      "packageVsix": true
    },
    "publish": [
      "semantic-release-vsce",
      {
        "path": "@semantic-release/github",
        "assets": "*.vsix"
      }
    ],
    "plugins": [
      "@semantic-release/commit-analyzer",
      "@semantic-release/release-notes-generator",
      "@semantic-release/changelog",
      [
        "@semantic-release/git",
        {
          "message": "chore(release): ${nextRelease.version}\n\n${nextRelease.notes}"
        }
      ],
      "@semantic-release/github"
    ]
  }
}
